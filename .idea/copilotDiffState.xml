<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Apptest2&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Apptest2&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.hardware.usb.action.USB_DEVICE_ATTACHED&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;&#10;            &lt;meta-data&#10;                android:name=&quot;android.hardware.usb.action.USB_DEVICE_ATTACHED&quot;&#10;                android:resource=&quot;@xml/device_filter&quot; /&gt;&#10;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.USB_PERMISSION&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Apptest2&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Apptest2&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.hardware.usb.action.USB_DEVICE_ATTACHED&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;&#10;            &lt;meta-data&#10;                android:name=&quot;android.hardware.usb.action.USB_DEVICE_ATTACHED&quot;&#10;                android:resource=&quot;@xml/device_filter&quot; /&gt;&#10;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptest2/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptest2/MainActivity.kt" />
              <option name="originalContent" value="package com.example.apptest2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.apptest2.ui.theme.Apptest2Theme&#10;import com.example.apptest2.usb.UsbCdcManager&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            Apptest2Theme {&#10;                val context = LocalContext.current&#10;                val usbCdcManager = remember { UsbCdcManager(context) }&#10;                val coroutineScope = rememberCoroutineScope()&#10;&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    FourButtonsScreen(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        onSend = { data -&gt;&#10;                            coroutineScope.launch {&#10;                                usbCdcManager.sendString(data)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FourButtonsScreen(modifier: Modifier = Modifier, onSend: (String) -&gt; Unit) {&#10;    Column(&#10;        modifier = modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Button(onClick = { onSend(&quot;Trame 1&quot;) }) {&#10;            Text(&quot;Button 1&quot;)&#10;        }&#10;        Button(onClick = { onSend(&quot;Trame 2&quot;) }) {&#10;            Text(&quot;Button 2&quot;)&#10;        }&#10;        Button(onClick = { onSend(&quot;Trame 3&quot;) }) {&#10;            Text(&quot;Button 3&quot;)&#10;        }&#10;        Button(onClick = { onSend(&quot;Trame 4&quot;) }) {&#10;            Text(&quot;Button 4&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun FourButtonsScreenPreview() {&#10;    Apptest2Theme {&#10;        FourButtonsScreen(onSend = {})&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apptest2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.apptest2.ui.theme.Apptest2Theme&#10;import com.example.apptest2.usb.UsbCdcManager&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            Apptest2Theme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    UsbTestScreen(modifier = Modifier.padding(innerPadding))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UsbTestScreen(modifier: Modifier = Modifier) {&#10;    var status by remember { mutableStateOf(&quot;Prêt à envoyer&quot;) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var logs by remember { mutableStateOf(listOf&lt;String&gt;()) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val context = LocalContext.current&#10;    val usbCdcManager = remember { UsbCdcManager(context) }&#10;    val listState = rememberLazyListState()&#10;    &#10;    // Auto-scroll vers le bas quand de nouveaux logs arrivent&#10;    LaunchedEffect(logs.size) {&#10;        if (logs.isNotEmpty()) {&#10;            listState.animateScrollToItem(logs.size - 1)&#10;        }&#10;    }&#10;    &#10;    val handleSend = { trame: String, trameNumber: Int -&gt;&#10;        if (!isLoading) {&#10;            coroutineScope.launch {&#10;                isLoading = true&#10;                status = &quot;Envoi de la Trame $trameNumber...&quot;&#10;                &#10;                val success = usbCdcManager.sendString(trame)&#10;                logs = usbCdcManager.logMessages&#10;                &#10;                status = if (success) {&#10;                    &quot;Trame $trameNumber envoyée avec succès&quot;&#10;                } else {&#10;                    &quot;Erreur lors de l'envoi de la Trame $trameNumber&quot;&#10;                }&#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;    &#10;    val handleDiagnostic = {&#10;        if (!isLoading) {&#10;            coroutineScope.launch {&#10;                isLoading = true&#10;                status = &quot;Diagnostic USB en cours...&quot;&#10;                &#10;                val devices = usbCdcManager.listConnectedDevices()&#10;                status = if (devices.isEmpty()) {&#10;                    &quot;Aucun périphérique USB détecté&quot;&#10;                } else {&#10;                    &quot;Trouvé ${devices.size} périphérique(s) USB&quot;&#10;                }&#10;                &#10;                // Forcer un appel pour voir les logs détaillés&#10;                usbCdcManager.sendString(&quot;TEST_DIAGNOSTIC&quot;)&#10;                logs = usbCdcManager.logMessages&#10;                &#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;    &#10;    val clearLogs = {&#10;        usbCdcManager.clearLogs()&#10;        logs = emptyList()&#10;        status = &quot;Logs effacés&quot;&#10;    }&#10;    &#10;    Column(&#10;        modifier = modifier.fillMaxSize().padding(16.dp)&#10;    ) {&#10;        // Zone de statut&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (status.contains(&quot;Erreur&quot;)) {&#10;                    MaterialTheme.colorScheme.errorContainer&#10;                } else if (status.contains(&quot;succès&quot;)) {&#10;                    MaterialTheme.colorScheme.primaryContainer&#10;                } else {&#10;                    MaterialTheme.colorScheme.surfaceVariant&#10;                }&#10;            )&#10;        ) {&#10;            Text(&#10;                text = status,&#10;                modifier = Modifier.padding(16.dp),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = if (status.contains(&quot;Erreur&quot;)) {&#10;                    MaterialTheme.colorScheme.onErrorContainer&#10;                } else {&#10;                    MaterialTheme.colorScheme.onSurfaceVariant&#10;                }&#10;            )&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        // Boutons de contrôle&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Button(&#10;                onClick = { handleDiagnostic() },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f),&#10;                colors = androidx.compose.material3.ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&quot; DIAGNOSTIC&quot;)&#10;            }&#10;            &#10;            Button(&#10;                onClick = { clearLogs() },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f),&#10;                colors = androidx.compose.material3.ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiary&#10;                )&#10;            ) {&#10;                Text(&quot;️ EFFACER&quot;)&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        // Boutons de trames&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Button(&#10;                onClick = { handleSend(&quot;TRAME1\r\n&quot;, 1) },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Trame 1&quot;)&#10;            }&#10;            &#10;            Button(&#10;                onClick = { handleSend(&quot;TRAME2\r\n&quot;, 2) },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Trame 2&quot;)&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        &#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Button(&#10;                onClick = { handleSend(&quot;TRAME3\r\n&quot;, 3) },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Trame 3&quot;)&#10;            }&#10;            &#10;            Button(&#10;                onClick = { handleSend(&quot;TRAME4\r\n&quot;, 4) },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Trame 4&quot;)&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        // Zone des logs&#10;        Text(&#10;            text = &quot;Logs USB (${logs.size} entrées):&quot;,&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        &#10;        Card(&#10;            modifier = Modifier.fillMaxSize(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            )&#10;        ) {&#10;            LazyColumn(&#10;                state = listState,&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                items(logs) { logEntry -&gt;&#10;                    Text(&#10;                        text = logEntry,&#10;                        fontSize = 12.sp,&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = when {&#10;                            logEntry.contains(&quot;❌&quot;) -&gt; MaterialTheme.colorScheme.error&#10;                            logEntry.contains(&quot;✅&quot;) -&gt; MaterialTheme.colorScheme.primary&#10;                            logEntry.contains(&quot;⚠️&quot;) -&gt; MaterialTheme.colorScheme.tertiary&#10;                            else -&gt; MaterialTheme.colorScheme.onSurface&#10;                        },&#10;                        modifier = Modifier.padding(vertical = 1.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UsbTestScreenPreview() {&#10;    Apptest2Theme {&#10;        UsbTestScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/device_filter.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/device_filter.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;usb-device class=&quot;2&quot; subclass=&quot;2&quot; protocol=&quot;1&quot; /&gt;&#10;    &lt;!-- CDC ACM devices --&gt;&#10;    &lt;usb-device class=&quot;10&quot; /&gt;&#10;    &lt;!-- CDC Data devices --&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>